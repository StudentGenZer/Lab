def nul():
    return [0] * 360

def line_prt():
    print("=================================================================")
    
def one():
    return [0] * 359 + [1]


def log(b):
    return 1 not in b


def cut_st(x=[]):
    return x[x.index(1):] if 1 in x else []


def cut(d=[]):
    # file = open("t.txt","a")
    # file.close
    m = [0] * 360
    m[0] = 1
    m[2] = 1
    m[4] = 1
    m[18] = 1
    m[359] = 1
    m.reverse()
    s = m.copy()
    while len(d) >= len(m):
        divin = len(d) - len(m)
        # print(str(divin))
        # print(str(d))
        m = m + [0] * divin
        d = plus(d, m)
        d = cut_st(d)
        m = s.copy()
    return d


def inp(string=""):
    x = []
    if len(string) == 0:
        return None
    else:
        if len(string) > 360:
            return None
        else:
            for i in string:
                if int(i) == 0 or int(i) == 1:
                    x.append(int(i))
                else:
                    return None
    return x


def prt(x=[]):
    string = ""
    if len(x) == 0:
        return None
    else:
        for i in x:
            string += str(i)

    return string


def plus(a=[], b=[]):
    # a = a
    # b = reverse(b)
    c = []
    if len(b) > len(a):
        return plus(b, a)
    else:
        div = len(a) - len(b)
        if div >= 0:
            for i in range(0, div):
                b.insert(0, 0)
            for i in range(0, len(a)):
                c.append((a[i] + b[i]) % 2)
        else:
            print("Error plus")
    return c


def multy(a: list, b: list):
     a.reverse()
     b.reverse()
     count = 0
     x = [0] * max([len(a), len(b)]) * 2
     if len(a) < len(b):
         a.reverse()
         b.reverse()
         return multy(b.copy(), a.copy())
     else:
         for i in range(0, len(b)):
             for j in range(len(a)):
                 x[j + count] = (x[j + count] + a[j] * b[i]) % 2
             count += 1
     x.reverse()
     x = cut_st(x)
     x = cut(x)
     return x


def sqr(a=[]):
    c = multy(a.copy(), a.copy())
    return c


def power(a=[], b=[]):
    if log(b):
        return [0] * (len(b) - 1) + [1]
    if b[len(b) - 1]:
        b.pop(len(b) - 1)
        b.insert(0, 0)
        return multy(sqr(power(a.copy(), b.copy())), a.copy())
    else:
        b.pop(len(b) - 1)
        b.insert(0, 0)
        return sqr(power(a.copy(), b.copy()))

def trace(a: list):
    return a.count(1) & 1
def inv():
    return [1]*358 + [0]

def inverse(v: list):
    return power(v, inv())



a = inp("10110011001101100111000011011010100000000010000010101010010011011000111000111101110111101010001110011000110000111110001100011100100010111000011001001111011000101100011101000000111010000110000000011010000101110001010111001111111000001110111101101000100101010100000101010011101010011011100110111110010001101011000101100000110011110010110000011011111110010101111")

b = inp("11110111110001011010100101111110111100101011110011101111011100101110001000110101101001101001101001000101010000000010010110100001101110000001000000100111010011010101001110010100101011100011011001000001000011001100101110011111010111101001001110100101101010100100001011000011011110110111101011010110110011100010010101001111000011000010000010111001110111110011100")

n = inp("10110111001100011010000000001101001000100010100001101111111101110001111111101100101100000000001001011010101001010110101000111101001000010010010011010111000010001001000001110011010110100011101010110100111011100011100001110000001001000010111100001111101011111101000011010111001000111110111111010010111110100100001101001001010110101101101000011011000010100011101")



##print("a1",a)
##print("b1",b)

print("Додавання")
c = plus(a.copy(),b.copy())
print(prt(c))
print(prt(c) == "01000100111100111101100110100100011100101001110001000101001111110110110000001000011110000011100111011101100000111100011010111101001100111001011001101000001011111001010011010100010001100101011001011011000110111101111001010000101111100111110011001101001111110000001110010000110100101100001101101000100010001001010000101111110000110000110010100010001001100110011")
line_prt()
line_prt()
print("Множення")
d = multy(a.copy(),b.copy())
print(prt(d))
print(prt(d) == prt(cut_st(inp("11111100000101001011110101000111011000001000110011110011111100111111001001101111111101110000011001010100101001100110010011011010000101010001011110110010100000101001001110010000000110101011001011110001010100100010100110011100110011000010111110010101110011000001010001011000011100000100001100110000101010011111010001111111001110001011011101100001100111110111100"))))
line_prt()
line_prt()
print("Квадрат")
k = sqr(a.copy())
print(prt(k))
print(prt(k) == prt(cut_st(inp("00110101000110110001010000000100111101100001010110001010100100011101100010101001011011111011111101010000011110100111111111011010011100010010000110001000110110000001000111011100100100111110011100110000111100111110000011110011111010110000100000011010001000101100010111011110000000000111100100101110110000110110110000000100111110110001101100000000100001100110010"))))
line_prt()
line_prt()
print("Степінь")
h = power(a.copy(),n.copy())
print(prt(h))
print(prt(h) == prt(cut_st(inp("11111101111000000101000111011100101010110000000100011111100101011010011001000110111110100011011101100001101100101000101100010101010001001011000011110100110010101011110110000111101111110010011001000000110111101110010101011100010111000101110001111001101011010010011101001001011000000001010111000001011110111000110110010001001100001000100101010101110111110010110"))))
line_prt()
line_prt()
print("Слід")
f = power(a.copy())
print(prt(f))
print(prt(f) == "1")
line_prt()
line_prt()
print("Зворотній")
s = inverse(a.copy())
print(s)
print(prt(s) == prt(cut_st(inp("11111000001010001110011011011010100111011100111011011011100011011110101001001101111100011111100111010011111000001001110111111100101110000010001001100011001101100011110000011001000011111110110010100101000100110101100101000101011100100111001010011101111101011001101101111000010001100010110110010101001110000001110110000111110100100000111011101000010111000110111"))))

